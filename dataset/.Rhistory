train <- merge(train, X_train, all=TRUE)
# read subject training data
subject_test = read.table("UCI HAR Dataset/test/subject_test.txt", col.names=c("subject_id"))
# assign row number as the values of ID column
subject_test$ID <- as.numeric(rownames(subject_test))
# read testing data
X_test = read.table("UCI HAR Dataset/test/X_test.txt")
# assign row number as the values of ID column
X_test$ID <- as.numeric(rownames(X_test))
# read activity testing data
y_test = read.table("UCI HAR Dataset/test/y_test.txt", col.names=c("activity_id"))  # max = 6
#y_test = merge(y_test, activity_labels)
# assign row number as the values of ID column
y_test$ID <- as.numeric(rownames(y_test))
# merge subject_test and y_test to train
test <- merge(subject_test, y_test, all=TRUE)
# merge test and X_test
test <- merge(test, X_test, all=TRUE)
#combine train and test
data1 <- rbind(train, test)
#Step 2: "Extracts only the measurements on the mean and standard deviation for each measurement."
features = read.table("UCI HAR Dataset/features.txt", col.names=c("feature_id", "feature_label"),)  #561
#Extracts only the measurements on the mean and standard deviation for each measurement.
selected_features <- features[grepl("mean\\(\\)", features$feature_label) | grepl("std\\(\\)", features$feature_label), ]
data2 <- data1[, c(c(1, 2, 3), selected_features$feature_id + 3) ]
#Step 3: "Uses descriptive activity names to name the activities in the data set."
activity_labels = read.table("UCI HAR Dataset/activity_labels.txt", col.names=c("activity_id", "activity_label"),) #
data3 = merge(data2, activity_labels)
#Step 4: "Appropriately labels the data set with descriptive activity names."
selected_features$feature_label = gsub("\\(\\)", "", selected_features$feature_label)
selected_features$feature_label = gsub("-", ".", selected_features$feature_label)
for (i in 1:length(selected_features$feature_label)) {
colnames(data3)[i + 3] <- selected_features$feature_label[i]
}
data4 = data3
#Step 5: "Creates a second, independent tidy data set with the average of each variable for each activity and each subject."
drops <- c("ID","activity_label")
data5 <- data4[,!(names(data4) %in% drops)]
aggdata <-aggregate(data5, by=list(subject = data5$subject_id, activity = data5$activity_id), FUN=mean, na.rm=TRUE)
drops <- c("subject","activity")
aggdata <- aggdata[,!(names(aggdata) %in% drops)]
aggdata = merge(aggdata, activity_labels)
aggdata
head(aggdata)
names(aggdata)
data = rbind(test_data, train_data)
if (!require("data.table")) {
install.packages("data.table")
}
if (!require("reshape2")) {
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# Load: activity labels
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
# Load: data column names
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
# Extract only the measurements on the mean and standard deviation for each measurement.
extract_features <- grepl("mean|std", features)
# Load and process X_test & y_test data.
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
names(X_test) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_test = X_test[,extract_features]
# Load activity labels
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# Bind data
test_data <- cbind(as.data.table(subject_test), y_test, X_test)
# Load and process X_train & y_train data.
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
names(X_train) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_train = X_train[,extract_features]
# Load activity data
y_train[,2] = activity_labels[y_train[,1]]
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
# Bind data
train_data <- cbind(as.data.table(subject_train), y_train, X_train)
# Merge test and train data
data = rbind(test_data, train_data)
names(data)
# Make sure data.table and reshape2 packages are downloaded
if(!require("data.table")){
install.packages("data.table")
}
if(!require("reshape2")){
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# 1.  Merges the training and the test sets to create one data set.
# If the zip file is not already downloaded
if(!file.exists("dataset")){
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", temp, method="curl")
unzip(zipfile = temp, exdir = "dataset")
}
# Read data into R
# Read training data
subjectTrain <- read.table("./dataset//UCI HAR Dataset/train/subject_train.txt")
xTrain <- read.table("./dataset/UCI HAR Dataset/train/X_train.txt")
yTrain <- read.table("./dataset/UCI HAR Dataset/train//y_train.txt")
# Red test data
subjectTest <- read.table("./dataset/UCI HAR Dataset/test/subject_test.txt")
xTest <- read.table("./dataset/UCI HAR Dataset/test/X_test.txt")
yTest <- read.table("./dataset/UCI HAR Dataset/test/y_test.txt")
workingDataSet <- rbind(xTrain, xTest)
#  2.	Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("./dataset/UCI HAR Dataset/features.txt")[,2]
mean_std_features <- which(grepl("mean|std", features))
meanStdDataSet <- workingDataSet[, mean_std_features]
#  3.	Uses descriptive activity names to name the activities in the data set
activity_labels <- read.table("./dataset/UCI HAR Dataset/activity_labels.txt")[,2]
yTrain[,1] <- activity_labels[yTrain[,1]]
#  4.	Appropriately labels the data set with descriptive variable names.
# 5.	From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
names(meanStdDataSet)
names(data)
rm(ls())
yTest
# Make sure data.table and reshape2 packages are downloaded
if(!require("data.table")){
install.packages("data.table")
}
if(!require("reshape2")){
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# 1.  Merges the training and the test sets to create one data set.
# If the zip file is not already downloaded
if(!file.exists("dataset")){
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", temp, method="curl")
unzip(zipfile = temp, exdir = "dataset")
}
# Read data into R
# Read training data
subjectTrain <- read.table("./dataset//UCI HAR Dataset/train/subject_train.txt")
xTrain <- read.table("./dataset/UCI HAR Dataset/train/X_train.txt")
yTrain <- read.table("./dataset/UCI HAR Dataset/train//y_train.txt")
trainData <- cbind(subjectTrain, yTrain, xTrain)
# Red test data
subjectTest <- read.table("./dataset/UCI HAR Dataset/test/subject_test.txt")
xTest <- read.table("./dataset/UCI HAR Dataset/test/X_test.txt")
yTest <- read.table("./dataset/UCI HAR Dataset/test/y_test.txt")
testData <- cbind(subjectTest, yTest, xTest)
workingDataSet <- rbind(trainData, testData)
#  2.	Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("./dataset/UCI HAR Dataset/features.txt")[,2]
mean_std_features <- which(grepl("mean|std", features))
meanStdDataSet <- workingDataSet[, mean_std_features]
#  3.	Uses descriptive activity names to name the activities in the data set
activity_labels <- read.table("./dataset/UCI HAR Dataset/activity_labels.txt")[,2]
#  4.	Appropriately labels the data set with descriptive variable names.
# 5.	From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
names(workingDataSet)
# Make sure data.table and reshape2 packages are downloaded
if(!require("data.table")){
install.packages("data.table")
}
if(!require("reshape2")){
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# 1.  Merges the training and the test sets to create one data set.
# If the zip file is not already downloaded
if(!file.exists("dataset")){
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", temp, method="curl")
unzip(zipfile = temp, exdir = "dataset")
}
# Read data into R
# Read training data
subjectTrain <- read.table("./dataset//UCI HAR Dataset/train/subject_train.txt")
xTrain <- read.table("./dataset/UCI HAR Dataset/train/X_train.txt")
yTrain <- read.table("./dataset/UCI HAR Dataset/train//y_train.txt")
trainData <- cbind(subjectTrain, yTrain, xTrain)
# Red test data
subjectTest <- read.table("./dataset/UCI HAR Dataset/test/subject_test.txt")
xTest <- read.table("./dataset/UCI HAR Dataset/test/X_test.txt")
yTest <- read.table("./dataset/UCI HAR Dataset/test/y_test.txt")
testData <- cbind(subjectTest, yTest, xTest)
workingDataSet <- rbind(trainData, testData)
#  2.	Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("./dataset/UCI HAR Dataset/features.txt")[,2]
mean_std_features <- which(grepl("mean|std", features))
workingDataSet <- workingDataSet[, mean_std_features]
#  3.	Uses descriptive activity names to name the activities in the data set
activity_labels <- read.table("./dataset/UCI HAR Dataset/activity_labels.txt")[,2]
#  4.	Appropriately labels the data set with descriptive variable names.
# 5.	From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
names(workingDataSet)
head(workingDataSet)
library("dplr")
library("dplyr")
mutate(workingDataSet, V1.1="Activity_id")
names(workingDataSet)
workingDataSet[,2]
mutate(workingDataSet, V1.1=activity_labels[workingDataSet$V1.1])
head(workingDataSet)
workingDataSet[,2] <- activity_labels[workingDataSet[,2]]
head(workingDataSet)
activity_names <- read.table('UCI HAR Dataset//activity_labels.txt')
activity_names
names(activity_names) <- c("activity_id", "activity_description")
activity_names
## Create one R script called run_analysis.R that does the following:
## 1. Merges the training and the test sets to create one data set.
## 2. Extracts only the measurements on the mean and standard deviation for each measurement.
## 3. Uses descriptive activity names to name the activities in the data set
## 4. Appropriately labels the data set with descriptive activity names.
## 5. Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
if (!require("data.table")) {
install.packages("data.table")
}
if (!require("reshape2")) {
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# Load: activity labels
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
# Load: data column names
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
# Extract only the measurements on the mean and standard deviation for each measurement.
extract_features <- grepl("mean|std", features)
# Load and process X_test & y_test data.
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
names(X_test) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_test = X_test[,extract_features]
# Load activity labels
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# Bind data
test_data <- cbind(as.data.table(subject_test), y_test, X_test)
# Load and process X_train & y_train data.
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
names(X_train) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_train = X_train[,extract_features]
# Load activity data
y_train[,2] = activity_labels[y_train[,1]]
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
# Bind data
train_data <- cbind(as.data.table(subject_train), y_train, X_train)
# Merge test and train data
data = rbind(test_data, train_data)
id_labels   = c("subject", "Activity_ID", "Activity_Label")
data_labels = setdiff(colnames(data), id_labels)
melt_data      = melt(data, id = id_labels, measure.vars = data_labels)
# Apply mean function to dataset using dcast function
tidy_data   = dcast(melt_data, subject + Activity_Label ~ variable, mean)
write.table(tidy_data, file = "./tidy_data.txt")
train_data
subject_train
as.data.table(subject_train)
names(train_data)
# Make sure data.table and reshape2 packages are downloaded
if(!require("data.table")){
install.packages("data.table")
}
if(!require("reshape2")){
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# 1.  Merges the training and the test sets to create one data set.
# If the zip file is not already downloaded
if(!file.exists("dataset")){
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", temp, method="curl")
unzip(zipfile = temp, exdir = "dataset")
}
# Read data into R
features <- read.table("./dataset/UCI HAR Dataset/features.txt")[,2]
# Read training data
subjectTrain <- read.table("./dataset//UCI HAR Dataset/train/subject_train.txt")
xTrain <- read.table("./dataset/UCI HAR Dataset/train/X_train.txt")
yTrain <- read.table("./dataset/UCI HAR Dataset/train/y_train.txt")
names(xTrain) <- features
trainData <- cbind(subjectTrain, yTrain, xTrain)
# Red test data
subjectTest <- read.table("./dataset/UCI HAR Dataset/test/subject_test.txt")
xTest <- read.table("./dataset/UCI HAR Dataset/test/X_test.txt")
yTest <- read.table("./dataset/UCI HAR Dataset/test/y_test.txt")
names(xTest) <- features
testData <- cbind(subjectTest, yTest, xTest)
workingDataSet <- rbind(trainData, testData)
#  2.	Extracts only the measurements on the mean and standard deviation for each measurement.
mean_std_features <- which(grepl("mean|std", features))
workingDataSet <- workingDataSet[, mean_std_features]
#  3.	Uses descriptive activity names to name the activities in the data set
activity_labels <- read.table("./dataset/UCI HAR Dataset/activity_labels.txt")[,2]
workingDataSet[,2] <- activity_labels[workingDataSet[,2]]
#  4.	Appropriately labels the data set with descriptive variable names.
# 5.	From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
names(workingDataSet)
colnames(workingDataSet)[1] <- "subject"
names(workingDataSet)
colnames(workingDataSet)[2] <- "activity"
names(workingDataSet)
colnames(workingDataSet)[2] <- "activity label"
names(workingDataSet)
# Make sure data.table and reshape2 packages are downloaded
if(!require("data.table")){
install.packages("data.table")
}
if(!require("reshape2")){
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# 1.  Merges the training and the test sets to create one data set.
# If the zip file is not already downloaded
if(!file.exists("dataset")){
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", temp, method="curl")
unzip(zipfile = temp, exdir = "dataset")
}
# Read data into R
features <- read.table("./dataset/UCI HAR Dataset/features.txt")[,2]
# Read training data
subjectTrain <- read.table("./dataset//UCI HAR Dataset/train/subject_train.txt")
xTrain <- read.table("./dataset/UCI HAR Dataset/train/X_train.txt")
yTrain <- read.table("./dataset/UCI HAR Dataset/train/y_train.txt")
names(xTrain) <- features
trainData <- cbind(subjectTrain, yTrain, xTrain)
# Red test data
subjectTest <- read.table("./dataset/UCI HAR Dataset/test/subject_test.txt")
xTest <- read.table("./dataset/UCI HAR Dataset/test/X_test.txt")
yTest <- read.table("./dataset/UCI HAR Dataset/test/y_test.txt")
names(xTest) <- features
testData <- cbind(subjectTest, yTest, xTest)
workingDataSet <- rbind(trainData, testData)
#  2.	Extracts only the measurements on the mean and standard deviation for each measurement.
mean_std_features <- which(grepl("mean|std", features))
workingDataSet <- workingDataSet[, mean_std_features]
#  3.	Uses descriptive activity names to name the activities in the data set
activity_labels <- read.table("./dataset/UCI HAR Dataset/activity_labels.txt")[,2]
workingDataSet[,2] <- activity_labels[workingDataSet[,2]]
#  4.	Appropriately labels the data set with descriptive variable names.
colnames(workingDataSet)[1] <- "subject"
colnames(workingDataSet)[2] <- "activity_label"
# 5.	From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
tidy_data   = dcast(workingDataSet, subject ~ variable, mean)
# Make sure data.table and reshape2 packages are downloaded
if(!require("data.table")){
install.packages("data.table")
}
if(!require("reshape2")){
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# 1.  Merges the training and the test sets to create one data set.
# If the zip file is not already downloaded
if(!file.exists("dataset")){
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", temp, method="curl")
unzip(zipfile = temp, exdir = "dataset")
}
# Read data into R
features <- read.table("./dataset/UCI HAR Dataset/features.txt")[,2]
# Read training data
subjectTrain <- read.table("./dataset//UCI HAR Dataset/train/subject_train.txt")
xTrain <- read.table("./dataset/UCI HAR Dataset/train/X_train.txt")
yTrain <- read.table("./dataset/UCI HAR Dataset/train/y_train.txt")
names(xTrain) <- features
trainData <- cbind(subjectTrain, yTrain, xTrain)
# Red test data
subjectTest <- read.table("./dataset/UCI HAR Dataset/test/subject_test.txt")
xTest <- read.table("./dataset/UCI HAR Dataset/test/X_test.txt")
yTest <- read.table("./dataset/UCI HAR Dataset/test/y_test.txt")
names(xTest) <- features
testData <- cbind(subjectTest, yTest, xTest)
workingDataSet <- rbind(trainData, testData)
#  2.	Extracts only the measurements on the mean and standard deviation for each measurement.
mean_std_features <- which(grepl("mean|std", features))
workingDataSet <- workingDataSet[, mean_std_features]
#  3.	Uses descriptive activity names to name the activities in the data set
activity_labels <- read.table("./dataset/UCI HAR Dataset/activity_labels.txt")[,2]
workingDataSet[,2] <- activity_labels[workingDataSet[,2]]
#  4.	Appropriately labels the data set with descriptive variable names.
colnames(workingDataSet)[1] <- "subject"
colnames(workingDataSet)[2] <- "activity_label"
# 5.	From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
tidy_data   = dcast(workingDataSet, subject ~ variable, mean)
# Make sure data.table and reshape2 packages are downloaded
if(!require("data.table")){
install.packages("data.table")
}
if(!require("reshape2")){
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# 1.  Merges the training and the test sets to create one data set.
# If the zip file is not already downloaded
if(!file.exists("dataset")){
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", temp, method="curl")
unzip(zipfile = temp, exdir = "dataset")
}
# Read data into R
features <- read.table("./dataset/UCI HAR Dataset/features.txt")[,2]
# Read training data
subjectTrain <- read.table("./dataset//UCI HAR Dataset/train/subject_train.txt")
xTrain <- read.table("./dataset/UCI HAR Dataset/train/X_train.txt")
yTrain <- read.table("./dataset/UCI HAR Dataset/train/y_train.txt")
names(yTrain) <- c("Activity_ID", "Activity_Label")
names(xTrain) <- features
trainData <- cbind(subjectTrain, yTrain, xTrain)
# Red test data
subjectTest <- read.table("./dataset/UCI HAR Dataset/test/subject_test.txt")
xTest <- read.table("./dataset/UCI HAR Dataset/test/X_test.txt")
yTest <- read.table("./dataset/UCI HAR Dataset/test/y_test.txt")
names(yTest) <- c("Activity_ID", "Activity_Label")
names(xTest) <- features
testData <- cbind(subjectTest, yTest, xTest)
workingDataSet <- rbind(trainData, testData)
#  2.	Extracts only the measurements on the mean and standard deviation for each measurement.
mean_std_features <- which(grepl("mean|std", features))
workingDataSet <- workingDataSet[, mean_std_features]
#  3.	Uses descriptive activity names to name the activities in the data set
activity_labels <- read.table("./dataset/UCI HAR Dataset/activity_labels.txt")[,2]
workingDataSet[,2] <- activity_labels[workingDataSet[,2]]
#  4.	Appropriately labels the data set with descriptive variable names.
colnames(workingDataSet)[1] <- "subject"
# 5.	From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
id_labels   = c("subject", "Activity_ID", "Activity_Label")
data_labels = setdiff(colnames(data), id_labels)
melt_data      = melt(data, id = id_labels, measure.vars = data_labels)
# Apply mean function to dataset using dcast function
tidy_data   = dcast(melt_data, subject + Activity_Label ~ variable, mean)
tidy_data
head(tidy_data)
head(tidy_data, 1)
head(tidy_data, 1)[,1]
head(tidy_data, 1)[1,1]
head(tidy_data, 1)[1,2]
head(tidy_data, 1)[1,3]
## Create one R script called run_analysis.R that does the following:
## 1. Merges the training and the test sets to create one data set.
## 2. Extracts only the measurements on the mean and standard deviation for each measurement.
## 3. Uses descriptive activity names to name the activities in the data set
## 4. Appropriately labels the data set with descriptive activity names.
## 5. Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
if (!require("data.table")) {
install.packages("data.table")
}
if (!require("reshape2")) {
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# Load: activity labels
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
# Load: data column names
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
# Extract only the measurements on the mean and standard deviation for each measurement.
extract_features <- grepl("mean|std", features)
# Load and process X_test & y_test data.
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
names(X_test) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_test = X_test[,extract_features]
# Load activity labels
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# Bind data
test_data <- cbind(as.data.table(subject_test), y_test, X_test)
# Load and process X_train & y_train data.
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
names(X_train) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_train = X_train[,extract_features]
# Load activity data
y_train[,2] = activity_labels[y_train[,1]]
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
# Bind data
train_data <- cbind(as.data.table(subject_train), y_train, X_train)
# Merge test and train data
data = rbind(test_data, train_data)
id_labels   = c("subject", "Activity_ID", "Activity_Label")
data_labels = setdiff(colnames(data), id_labels)
melt_data      = melt(data, id = id_labels, measure.vars = data_labels)
# Apply mean function to dataset using dcast function
tidy_data   = dcast(melt_data, subject + Activity_Label ~ variable, mean)
head(tidy_data, 1)[1, 3]
